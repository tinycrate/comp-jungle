// Initialise Gradle project with Java plugins
plugins {
    id 'java'
    id 'application'
    id 'jacoco'
}

// Package group
group 'hk.edu.polyu.comp.comp2021'

// Version
version '1.0'

// Mininum and target Java version
sourceCompatibility = 1.8
targetCompatibility = 1.8

// Set the project main class
mainClassName = 'hk.edu.polyu.comp.comp2021.jungle.Application'

// Maven repo
repositories {
    jcenter()
}

// Project dependencies
dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

// Add necessary attributes into /MEDA-INF/MANIFEST.MF
jar {
    manifest {
        attributes('Main-Class': mainClassName)
    }
}

// Use custom project structure instead of Maven style
// /                        | Project root
// ├ src/                   | Source code folder
// ├ resources/             | Resource folder
// ├ test/                  | Test code folder
// └ test-resources/        | Test resource folder
//
sourceSets {
    main {
        java { srcDirs = ['src'] }
        resources { srcDirs = ['resources'] }
    }
    test {
        java { srcDirs = ['test'] }
        resources { srcDirs = ['test-resources'] }
    }
}

// Configure unit test to use Jacoco for generating coverage
test {
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

// Jacoco configuretion
jacoco {
    toolVersion = "0.8.2"
}

// Configure jacoco to generate coverage report
jacocoTestReport {
    reports {
        xml.enabled = true
        csv.enabled = false
        html.destination file("${buildDir}/jacoco/html")
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(
                    dir: it,
                    include: ['/hk/edu/polyu/comp/comp2021/jungle/model/**']
            )
        })
    }
}

// Force javac to compile with UTF-8 encoding
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// Force javadoc output UTF-8 website
javadoc {
    options.encoding = 'UTF-8'
}
